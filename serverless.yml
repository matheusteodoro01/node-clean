service: car-service

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  CarTableName: "cars"
  UserTableName: "users"
  CarImagesBucketName: "car-images-kittech"
  CarQueueName: "process-car"
  serverless-offline:
    httpPort: 3001
    lambdaPort: 3000
    noPrependStageInUrl: true
  bundle:
    externals:
      - "@nestjs/common"
      - "@nestjs/core"
      - "@nestjs/platform-express"

provider:
  name: aws
  runtime: nodejs16.x
  iamRoleStatements:
    - Effect: Allow
      Action: "*"
      Resource: arn:aws:s3:::car-images-kittech/*
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::GetAtt: [CarsTable, Arn]
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::GetAtt: [UsersTable, Arn]
    - Effect: Allow
      Action:
        - sqs:GetQueueUrl
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource:
        - Fn::GetAtt: [CarQueue, Arn]
  environment:
    LOG_LEVEL: debug
    CAR_TABLE: ${self:custom.CarTableName}
    USER_TABLE: ${self:custom.UserTableName}
    CAR_IMAGES_BUCKET: ${self:custom.CarImagesBucketName}
    CAR_QUEUE: !GetAtt [CarQueue, QueueUrl]

functions:
  api:
    handler: src/main/api/handler.handler
    events:
      - httpApi: "*"
  proccess-car:
    handler: src/main/lambdas/proccess-car.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [CarQueue, Arn]

resources:
  Resources:
    CarImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.CarImagesBucketName}
    CarsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.CarTableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.UserTableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    CarQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.CarQueueName}
