service: car-service

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  CarTableName: 'cars'
  CarImagesBucketName: 'car-images-kittech'
  serverless-offline:
    httpPort: 3001
    lambdaPort: 3000
    noPrependStageInUrl: true
  bundle:
    excludeFiles:
      - '**/*.spec.ts'
      - 'jest.setup.ts'
    externals:
      - '@nestjs/common'
      - '@nestjs/core'
      - '@nestjs/platform-express'

provider:
  name: aws
  runtime: nodejs16.x
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:PutObject
      Resource:
      - Fn::GetAtt: [ CarImagesBucket, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
      - Fn::GetAtt: [ CarsTable, Arn ]
  environment:
    CAR_TABLE: ${self:custom.CarTableName}
    CAR_IMAGES_BUCKET: ${self:custom.CarImagesBucketName}

functions:
  api:
    handler: src/main/api/handler.handler
    events:
      - httpApi: '*'

resources:
  Resources:
    CarImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.CarImagesBucketName}
    CarsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.CarTableName}
        AttributeDefinitions:
          - AttributeName: carId
            AttributeType: S
        KeySchema:
          - AttributeName: carId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

